service: ${file(./config.json):deployment.serviceName}

provider:
  name: aws
  runtime: python3.8
  region: ${file(./config.json):deployment.region}
  timeout: 60
  environment:
      BUCKET_NAME: ${file(./config.json):deployment.bucketName}
      PATIENT_TABLE: ${self:service}-patients
      PATIENT_CLASSIFICATION_TABLE: ${self:service}-patients-classifications
      EXECUTATION_CLASSIFICATION_TABLE: ${self:service}-executations-classifications
      NOTIFICATION_TABLE: ${self:service}-notification
      APPLICATION_EMAIL: ${file(./config.json):deployment.applicationEmail}
      DEV_EMAIL: ${file(./config.json):deployment.devEmail}
      SEGMENTATION_QUEUE_URL: ${file(./config.json):deployment.segmentationQueueUrl} 
  iamRoleStatements:
      - Effect: Allow
        Action:
            - s3:*
            - dynamodb:*
            - ses:SendEmail
            - sqs:*
            - lambda:InvokeFunction
            - lambda:InvokeAsync
        Resource: '*'

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${file(./config.json):deployment.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${file(./config.json):deployment.clientName}
        GenerateSecret: False
        AccessTokenValidity: 24
        UserPoolId:
          Ref: CognitoUserPool

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

    ParkinsoDeBolsoBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: ${self:provider.environment.BUCKET_NAME}

    PatientTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.PATIENT_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    PatientClassifictionTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.PATIENT_CLASSIFICATION_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ExecutationClassifictionTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.EXECUTATION_CLASSIFICATION_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5 

    NotificationTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.NOTIFICATION_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5    

functions:
  PatientGet:
    handler: handlers/patient.get
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/patient/{id}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  PatientGetAll:
    handler: handlers/patient.get_all
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/patient/userid/{userid}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          
  PatientCreate:
    handler: handlers/patient.create
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/patient
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          
  PatientPut:
    handler: handlers/patient.put
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/patient/{id}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          
  PatientDelete:
    handler: handlers/patient.delete
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/patient/{id}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  PatientClassificationGetAll:
    handler: handlers/patient_classification.get_all
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/patient_classification/patientid/{patientid}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          
  PatientClassificationDelete:
    handler: handlers/patient_classification.delete
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/patient_classification/{id}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          
  PatientClassificationCreate:
    handler: handlers/patient_classification.create
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/patient_classification
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  CreatePredictionId:
    handler: handlers/predict.create_predict_id
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/predict/create/id
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  AddImagePredictionQueue:
    handler: handlers/predict.add_image_prediction_queue
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/predict/add/image
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  RequestTerminatePrediction:
    handler: handlers/predict.request_terminate_prediction
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/predict/request/terminate
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  TerminatePrediction:
    handler: handlers/predict.terminate_prediction
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/predict/terminate
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  AutoConfirm:
    handler: handlers/auto_confirm.confirm

  ClearData:
    handler: handlers/privacy.clean_data
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/privacy/{userid}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  SendComment:
    handler: handlers/notify.send_comment
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/comment
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  NotificationGet:
    handler: handlers/notify.get_all
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/notification/{userid}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          
  NotificationMarkRead:
    handler: handlers/notify.mark_read
    events:
      - http:
          path: ${file(./config.json):deployment.pathApi}/notification/read/{id}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
              
  NotificationCreate:
    handler: handlers/notify.create